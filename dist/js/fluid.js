!function(v){var x,c,f={x:0,y:0,px:0,py:0,down:!1},g=1900,m=500,_=10,F=10,u=g/_,l=m/_,q=[],E=[];function M(){var e,t,o,r,n,s,v,u=f.x-f.px,l=f.y-f.py;for(i=0;i<q.length;i++){var p=q[i];for(j=0;j<p.length;j++){var h=p[j];f.down&&(t=u,o=l,r=F,s=n=void 0,n=(e=h).x-f.x,s=e.y-f.y,(s=Math.sqrt(s*s+n*n))<r)&&(n=r/(s=s<4?r:s),e.xv+=t*n,e.yv+=o*n),s=r=void 0,r=.5*h.up_left.xv+h.left.xv+.5*h.down_left.xv-.5*h.up_right.xv-h.right.xv-.5*h.down_right.xv,s=.5*h.up_left.yv+h.up.yv+.5*h.up_right.yv-.5*h.down_left.yv-h.down.yv-.5*h.down_right.yv,h.pressure=.25*(r+s)}}for(c.clearRect(0,0,x.width,x.height),c.strokeStyle="#FFFF",i=0;i<E.length;i++){var y,d,w,a=E[i];0<=a.x&&a.x<g&&0<=a.y&&a.y<m?(d=parseInt(a.x/_),w=parseInt(a.y/_),d=q[d][w],w=a.x%_/_,y=a.y%_/_,a.xv+=(1-w)*d.xv*.05,a.yv+=(1-y)*d.yv*.05,a.xv+=w*d.right.xv*.05,a.yv+=w*d.right.yv*.05,a.xv+=y*d.down.xv*.05,a.yv+=y*d.down.yv*.05,a.x+=a.xv,a.y+=a.yv,w=a.px-a.x,y=a.py-a.y,d=Math.sqrt(w*w+y*y),(w=.5*Math.random())<d?(c.lineWidth=1,c.beginPath(),c.moveTo(a.x,a.y),c.lineTo(a.px,a.py)):(c.beginPath(),c.moveTo(a.x,a.y),c.lineTo(a.x+w,a.y+w)),c.stroke(),a.px=a.x,a.py=a.y):(a.x=a.px=Math.random()*g,a.y=a.py=Math.random()*m,a.xv=0,a.yv=0),a.xv*=.5,a.yv*=.5}for(i=0;i<q.length;i++){p=q[i];for(j=0;j<p.length;j++){h=p[j];(v=h).xv+=.25*(.5*v.up_left.pressure+v.left.pressure+.5*v.down_left.pressure-.5*v.up_right.pressure-v.right.pressure-.5*v.down_right.pressure),v.yv+=.25*(.5*v.up_left.pressure+v.up.pressure+.5*v.up_right.pressure-.5*v.down_left.pressure-v.down.pressure-.5*v.down_right.pressure),v.xv*=.99,v.yv*=.99}}f.px=f.x,f.py=f.y,requestAnimationFrame(M)}function p(e,t,o){this.x=e,this.y=t,this.r=o,this.col=0,this.row=0,this.xv=0,this.yv=0,this.pressure=0}function h(e,t){this.x=this.px=e,this.y=this.py=t,this.xv=this.yv=0}function y(e){e.preventDefault(),f.down=!0}function d(){f.down=!1}function w(e){e.preventDefault();var t=x.getBoundingClientRect();f.x=f.px=e.touches[0].pageX-t.left,f.y=f.py=e.touches[0].pageY-t.top,f.down=!0}function a(e){e.touches||(f.down=!1)}function L(e){e.preventDefault(),f.px=f.x,f.py=f.y,f.x=e.offsetX||e.layerX,f.y=e.offsetY||e.layerY}function A(e){e.preventDefault(),f.px=f.x,f.py=f.y;var t=x.getBoundingClientRect();f.x=e.touches[0].pageX-t.left,f.y=e.touches[0].pageY-t.top}v.Fluid={initialize:function(){for(x=document.getElementById("c"),c=x.getContext("2d"),x.width=g,x.height=m,i=0;i<2e3;i++)E.push(new h(Math.random()*g,Math.random()*m));for(col=0;col<u;col++)for(q[col]=[],row=0;row<l;row++){var e=new p(col*_,row*_,_);q[col][row]=e,q[col][row].col=col,q[col][row].row=row}for(col=0;col<u;col++)for(row=0;row<l;row++){var e=q[col][row],t=0<=row-1?row-1:l-1,o=0<=col-1?col-1:u-1,r=col+1<u?col+1:0,n=q[col][t],s=q[o][row],o=q[o][t],r=q[r][t];e.up=n,e.left=s,e.up_left=o,e.up_right=r,n.down=q[col][row],s.right=q[col][row],o.down_right=q[col][row],r.down_left=q[col][row]}v.addEventListener("mouseover",y),v.addEventListener("touchstart",w),v.addEventListener("mouseup",d),v.addEventListener("touchend",a),x.addEventListener("mousemove",L),x.addEventListener("touchmove",A),v.onload=M}}}(window),window.requestAnimationFrame=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame,Fluid.initialize();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
